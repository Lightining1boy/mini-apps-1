class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      newAccount: {},
      checkoutClicked: false,
      page1Clicked: false,
      page2Clicked: false,
      page3Clicked: false
    };
    this.checkOutHandler = this.checkOutHandler.bind(this);
    this.next1Handler = this.next1Handler.bind(this);
    this.next2Handler = this.next2Handler.bind(this);
    this.next3Handler = this.next3Handler.bind(this);
    this.purchaseMade = this.purchaseMade.bind(this);
  }

  checkOutHandler(event) {
    this.setState({
      checkoutClicked: true
    });
    event.preventDefault();
  }

  next1Handler(info) {
    Object.assign(this.state.newAccount, info);
    this.setState({
      page1Clicked: true
    });
  }

  next2Handler(info) {
    Object.assign(this.state.newAccount, info);
    this.setState({
      page2Clicked: true
    });
    console.log(this.state.newAccount);
  }

  next3Handler(info) {
    console.log(this.state.newAccount);
    Object.assign(this.state.newAccount, info);
    this.setState({
      page3Clicked: true
    });
    console.log('JSON obj', JSON.stringify(this.state.newAccount));
  }

  purchaseMade(event) {
    event.preventDefault(); //Put a post request here

    fetch('/profiles', {
      method: 'POST',
      body: this.state.newAccount,
      headers: {
        'Content-Type': 'application/json'
      }
    }).then(console.log('Post sent')).then(this.setState({
      newAccount: {},
      checkoutClicked: false,
      page1Clicked: false,
      page2Clicked: false,
      page3Clicked: false
    })).catch(console.log('Failed to post'));
  }

  render() {
    if (this.state.checkoutClicked === false) {
      return React.createElement("div", null, React.createElement("button", {
        onClick: this.checkOutHandler
      }, "CheckOut"));
    }

    if (this.state.page1Clicked === false) {
      return React.createElement(Page1, {
        next1Handler: this.next1Handler
      });
    }

    if (this.state.page2Clicked === false) {
      return React.createElement(Page2, {
        next2Handler: this.next2Handler
      });
    }

    if (this.state.page3Clicked === false) {
      return React.createElement(Page3, {
        next3Handler: this.next3Handler
      });
    } else {
      return React.createElement("div", null, React.createElement("h1", null, "ACCOUNT INFORMATION"), React.createElement("ul", null, React.createElement("li", null, " Name- ", this.state.newAccount.name, " "), React.createElement("li", null, "Email- ", this.state.newAccount.email), React.createElement("li", null, "Password- ", this.state.newAccount.password), React.createElement("li", null, "Address- ", this.state.newAccount.address), React.createElement("li", null, "Phone Number- ", this.state.newAccount.phone), React.createElement("li", null, "Credit Card Number- ", this.state.newAccount.creditCard), React.createElement("li", null, "Experation Date- ", this.state.newAccount.expiryDate), React.createElement("li", null, "CVV- ", this.state.newAccount.CVV), React.createElement("li", null, "Zip Code- ", this.state.newAccount.zipCode)), React.createElement("button", {
        onClick: this.purchaseMade
      }, "Purchase"));
    }
  }

}

export default App; //

class Page1 extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: '',
      email: '',
      password: ''
    };
    this.handleChange = this.handleChange.bind(this);
    this.handleClick = this.handleClick.bind(this);
  }

  handleChange(event) {
    const {
      name,
      value
    } = event.target;
    this.setState({
      [name]: value
    });
  }

  handleClick(event) {
    event.preventDefault();
    this.props.next1Handler(this.state);
    this.setState({
      name: '',
      email: '',
      password: ''
    });
  }

  render() {
    return React.createElement("div", null, "Page 1", React.createElement("form", null, React.createElement("label", null, "Name", React.createElement("input", {
      name: "name",
      value: this.state.name,
      onChange: this.handleChange
    })), React.createElement("label", null, " Email", React.createElement("input", {
      name: "email",
      value: this.state.email,
      onChange: this.handleChange
    })), React.createElement("label", null, "Password", React.createElement("input", {
      name: "password",
      value: this.state.password,
      onChange: this.handleChange
    })), React.createElement("button", {
      onClick: this.handleClick
    }, "Next")));
  }

}

class Page2 extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      address: '',
      phone: ''
    };
    this.handleChange = this.handleChange.bind(this);
    this.handleClick = this.handleClick.bind(this);
  }

  handleChange() {
    const {
      name,
      value
    } = event.target;
    this.setState({
      [name]: value
    });
  }

  handleClick(event) {
    event.preventDefault();
    this.props.next2Handler(this.state);
    this.setState({
      address: '',
      phone: ''
    });
  }

  render() {
    return React.createElement("div", null, "Page 2", React.createElement("form", null, React.createElement("label", null, "Address", React.createElement("input", {
      name: "address",
      value: this.state.address,
      onChange: this.handleChange
    })), React.createElement("label", null, "Phone Number", React.createElement("input", {
      name: "phone",
      value: this.state.phone,
      onChange: this.handleChange
    })), React.createElement("button", {
      onClick: this.handleClick
    }, "Next")));
  }

}

class Page3 extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      creditCard: '',
      expiryDate: '',
      CVV: '',
      zipCode: ''
    };
    this.handleChange = this.handleChange.bind(this);
    this.handleClick = this.handleClick.bind(this);
  }

  handleChange() {
    const {
      name,
      value
    } = event.target;
    this.setState({
      [name]: value
    });
  }

  handleClick(event) {
    event.preventDefault();
    this.props.next3Handler(this.state);
    this.setState({
      creditCard: '',
      expiryDate: '',
      CVV: '',
      zipCode: ''
    });
  }

  render() {
    return React.createElement("div", null, "Page 3", React.createElement("form", null, React.createElement("label", null, " Credit Card Number", React.createElement("input", {
      name: "creditCard",
      value: this.state.creditCard,
      onChange: this.handleChange
    })), React.createElement("label", null, " Expiry Date", React.createElement("input", {
      name: "expiryDate",
      value: this.state.expiryDate,
      onChange: this.handleChange
    })), React.createElement("label", null, " CVV", React.createElement("input", {
      name: "CVV",
      value: this.state.CVV,
      onChange: this.handleChange
    })), React.createElement("label", null, " Zip Code", React.createElement("input", {
      name: "zipCode",
      value: this.state.zipCode,
      onChange: this.handleChange
    })), React.createElement("button", {
      onClick: this.handleClick
    }, "Next")));
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,